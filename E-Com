/*Banner*/
import React, { useState, useEffect } from 'react';
import { ChevronLeft, ChevronRight, Zap, Truck, Clock } from 'lucide-react';

const Banner: React.FC = () => {
  const [currentSlide, setCurrentSlide] = useState(0);

  const banners = [
    {
      id: 1,
      title: "15-Minute Lightning Delivery",
      subtitle: "Get your essentials delivered in just 15 minutes!",
      buttonText: "Shop Now",
      bgColor: "from-green-500 to-green-600",
      icon: Zap
    },
    {
      id: 2,
      title: "Free Delivery on ₹199+",
      subtitle: "No delivery charges on orders above ₹199",
      buttonText: "Start Shopping",
      bgColor: "from-blue-500 to-blue-600",
      icon: Truck
    },
    {
      id: 3,
      title: "Today's Super Deals",
      subtitle: "Up to 60% off on electronics and groceries",
      buttonText: "View Deals",
      bgColor: "from-purple-500 to-purple-600",
      icon: Clock
    }
  ];

  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentSlide((prev) => (prev + 1) % banners.length);
    }, 5000);

    return () => clearInterval(timer);
  }, [banners.length]);

  const nextSlide = () => {
    setCurrentSlide((prev) => (prev + 1) % banners.length);
  };

  const prevSlide = () => {
    setCurrentSlide((prev) => (prev - 1 + banners.length) % banners.length);
  };

  return (
    <div className="relative bg-gradient-to-r from-orange-100 to-yellow-100 overflow-hidden">
      {/* Main Banner Carousel */}
      <div className="relative h-64 lg:h-80">
        {banners.map((banner, index) => {
          const IconComponent = banner.icon;
          return (
            <div
              key={banner.id}
              className={`absolute inset-0 transition-all duration-500 ease-in-out ${
                index === currentSlide 
                  ? 'opacity-100 transform translate-x-0' 
                  : 'opacity-0 transform translate-x-full'
              }`}
            >
              <div className={`h-full bg-gradient-to-r ${banner.bgColor} flex items-center`}>
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 w-full">
                  <div className="flex items-center justify-between">
                    <div className="text-white">
                      <div className="flex items-center space-x-3 mb-4">
                        <IconComponent size={48} className="text-white" />
                        <div>
                          <h1 className="text-3xl lg:text-5xl font-bold mb-2">
                            {banner.title}
                          </h1>
                          <p className="text-lg lg:text-xl opacity-90 mb-6">
                            {banner.subtitle}
                          </p>
                        </div>
                      </div>
                      <button className="bg-white text-gray-900 px-8 py-3 rounded-lg font-semibold hover:bg-gray-100 transition-colors shadow-lg transform hover:scale-105">
                        {banner.buttonText}
                      </button>
                    </div>
                    
                    {/* Decorative Elements */}
                    <div className="hidden lg:block">
                      <div className="relative">
                        <div className="w-32 h-32 bg-white bg-opacity-20 rounded-full animate-pulse"></div>
                        <div className="absolute top-4 left-4 w-24 h-24 bg-white bg-opacity-30 rounded-full animate-bounce"></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          );
        })}

        {/* Navigation Arrows */}
        <button
          onClick={prevSlide}
          className="absolute left-4 top-1/2 transform -translate-y-1/2 bg-white bg-opacity-20 hover:bg-opacity-30 text-white p-2 rounded-full transition-all"
        >
          <ChevronLeft size={24} />
        </button>
        
        <button
          onClick={nextSlide}
          className="absolute right-4 top-1/2 transform -translate-y-1/2 bg-white bg-opacity-20 hover:bg-opacity-30 text-white p-2 rounded-full transition-all"
        >
          <ChevronRight size={24} />
        </button>

        {/* Slide Indicators */}
        <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2">
          {banners.map((_, index) => (
            <button
              key={index}
              onClick={() => setCurrentSlide(index)}
              className={`w-3 h-3 rounded-full transition-all ${
                index === currentSlide 
                  ? 'bg-white' 
                  : 'bg-white bg-opacity-50'
              }`}
            />
          ))}
        </div>
      </div>

      {/* Secondary Banner - Delivery Areas */}
      <div className="bg-orange-500 text-white py-4">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex flex-wrap items-center justify-center space-x-8 text-center">
            <div className="flex items-center space-x-2">
              <div className="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
              <span className="text-sm font-medium">Now Live in Amalapuram</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
              <span className="text-sm font-medium">Expanding to Malikipuram</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-3 h-3 bg-yellow-400 rounded-full animate-pulse"></div>
              <span className="text-sm font-medium">Coming Soon to Lakkavaram</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Banner;

/*Cart*/
import React, { useState } from 'react';
import { X, Plus, Minus, ShoppingBag, Trash2, ArrowRight } from 'lucide-react';
import { useCart } from '../contexts/CartContext';

interface CartProps {
  isOpen: boolean;
  onClose: () => void;
  language: string;
}

const Cart: React.FC<CartProps> = ({ isOpen, onClose, language }) => {
  const { state, updateQuantity, removeFromCart, clearCart } = useCart();
  const [isCheckingOut, setIsCheckingOut] = useState(false);

  const handleCheckout = async () => {
    setIsCheckingOut(true);
    // Simulate checkout process
    await new Promise(resolve => setTimeout(resolve, 2000));
    alert(language === 'Telugu' ? 'ఆర్డర్ విజయవంతంగా పంపబడింది!' : 'Order placed successfully!');
    clearCart();
    setIsCheckingOut(false);
    onClose();
  };

  const deliveryFee = state.total >= 199 ? 0 : 25;
  const finalTotal = state.total + deliveryFee;

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 overflow-hidden">
      {/* Backdrop */}
      <div 
        className="absolute inset-0 bg-black bg-opacity-50 transition-opacity"
        onClick={onClose}
      />
      
      {/* Cart Panel */}
      <div className="absolute right-0 top-0 h-full w-full max-w-md bg-white shadow-xl transform transition-transform">
        <div className="flex flex-col h-full">
          {/* Header */}
          <div className="flex items-center justify-between p-4 border-b border-gray-200">
            <h2 className="text-lg font-semibold text-gray-900">
              {language === 'Telugu' ? 'మీ కార్ట్' : 'Your Cart'} ({state.itemCount})
            </h2>
            <button
              onClick={onClose}
              className="p-2 hover:bg-gray-100 rounded-full transition-colors"
            >
              <X size={20} />
            </button>
          </div>

          {/* Cart Items */}
          <div className="flex-1 overflow-y-auto p-4">
            {state.items.length === 0 ? (
              <div className="flex flex-col items-center justify-center h-full text-center">
                <ShoppingBag size={64} className="text-gray-300 mb-4" />
                <h3 className="text-lg font-medium text-gray-900 mb-2">
                  {language === 'Telugu' ? 'మీ కార్ట్ ఖాళీగా ఉంది' : 'Your cart is empty'}
                </h3>
                <p className="text-gray-500 mb-6">
                  {language === 'Telugu' 
                    ? 'షాపింగ్ ప్రారంభించడానికి కొన్ని ఉత్పత్తులను జోడించండి'
                    : 'Add some products to start shopping'
                  }
                </p>
                <button
                  onClick={onClose}
                  className="bg-orange-600 hover:bg-orange-700 text-white px-6 py-2 rounded-lg font-medium transition-colors"
                >
                  {language === 'Telugu' ? 'షాపింగ్ కొనసాగించండి' : 'Continue Shopping'}
                </button>
              </div>
            ) : (
              <div className="space-y-4">
                {state.items.map((item) => (
                  <div key={item.product.id} className="flex items-center space-x-4 bg-gray-50 p-4 rounded-lg">
                    <img
                      src={item.product.image}
                      alt={item.product.name}
                      className="w-16 h-16 object-cover rounded-lg"
                    />
                    
                    <div className="flex-1 min-w-0">
                      <h4 className="font-medium text-gray-900 truncate">
                        {item.product.name}
                      </h4>
                      <p className="text-sm text-gray-500">
                        {item.product.brand}
                      </p>
                      <div className="flex items-center space-x-2 mt-1">
                        <span className="font-semibold text-gray-900">
                          ₹{item.product.price.toLocaleString('en-IN')}
                        </span>
                        {item.product.originalPrice > item.product.price && (
                          <span className="text-xs text-gray-500 line-through">
                            ₹{item.product.originalPrice.toLocaleString('en-IN')}
                          </span>
                        )}
                      </div>
                    </div>
                    
                    <div className="flex flex-col items-end space-y-2">
                      {/* Quantity Controls */}
                      <div className="flex items-center space-x-2">
                        <button
                          onClick={() => updateQuantity(item.product.id, item.quantity - 1)}
                          className="p-1 hover:bg-gray-200 rounded-full transition-colors"
                        >
                          <Minus size={14} />
                        </button>
                        <span className="w-8 text-center font-medium">
                          {item.quantity}
                        </span>
                        <button
                          onClick={() => updateQuantity(item.product.id, item.quantity + 1)}
                          className="p-1 hover:bg-gray-200 rounded-full transition-colors"
                        >
                          <Plus size={14} />
                        </button>
                      </div>
                      
                      {/* Remove Button */}
                      <button
                        onClick={() => removeFromCart(item.product.id)}
                        className="p-1 text-red-500 hover:bg-red-50 rounded-full transition-colors"
                      >
                        <Trash2 size={14} />
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>

          {/* Cart Summary & Checkout */}
          {state.items.length > 0 && (
            <div className="border-t border-gray-200 p-4 space-y-4">
              {/* Delivery Info */}
              <div className="bg-green-50 p-3 rounded-lg">
                <div className="flex items-center justify-between text-sm">
                  <span className="text-green-800">
                    {language === 'Telugu' ? 'డెలివరీ ఛార్జీ' : 'Delivery Fee'}
                  </span>
                  <span className={deliveryFee === 0 ? 'text-green-600 font-medium' : 'text-gray-600'}>
                    {deliveryFee === 0 
                      ? (language === 'Telugu' ? 'ఉచితం' : 'FREE') 
                      : `₹${deliveryFee}`
                    }
                  </span>
                </div>
                {state.total < 199 && (
                  <p className="text-xs text-green-700 mt-1">
                    {language === 'Telugu' 
                      ? `₹${199 - state.total} మరింత జోడించి ఉచిత డెలివరీ పొందండి`
                      : `Add ₹${199 - state.total} more for free delivery`
                    }
                  </p>
                )}
              </div>

              {/* Total */}
              <div className="flex items-center justify-between text-lg font-semibold">
                <span>{language === 'Telugu' ? 'మొత్తం' : 'Total'}</span>
                <span>₹{finalTotal.toLocaleString('en-IN')}</span>
              </div>

              {/* Checkout Button */}
              <button
                onClick={handleCheckout}
                disabled={isCheckingOut}
                className="w-full bg-orange-600 hover:bg-orange-700 disabled:bg-orange-400 text-white py-3 px-4 rounded-lg font-medium flex items-center justify-center space-x-2 transition-colors"
              >
                {isCheckingOut ? (
                  <div className="animate-spin rounded-full h-5 w-5 border-2 border-white border-t-transparent"></div>
                ) : (
                  <>
                    <span>
                      {language === 'Telugu' ? 'చెక్‌అవుట్' : 'Proceed to Checkout'}
                    </span>
                    <ArrowRight size={16} />
                  </>
                )}
              </button>

              {/* Clear Cart */}
              <button
                onClick={clearCart}
                className="w-full text-gray-600 hover:text-red-600 py-2 text-sm transition-colors"
              >
                {language === 'Telugu' ? 'కార్ట్ క్లియర్ చేయండి' : 'Clear Cart'}
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Cart;

/*FilterBar*/
import React from 'react';
import { Filter, SortAsc } from 'lucide-react';

interface FilterBarProps {
  sortBy: string;
  setSortBy: (sort: string) => void;
  showFilters: boolean;
  setShowFilters: (show: boolean) => void;
  language: string;
}

const FilterBar: React.FC<FilterBarProps> = ({
  sortBy,
  setSortBy,
  showFilters,
  setShowFilters,
  language
}) => {
  const sortOptions = [
    { value: 'relevance', label: language === 'Telugu' ? 'సంబంధిత' : 'Relevance' },
    { value: 'price-low', label: language === 'Telugu' ? 'ధర: తక్కువ నుండి ఎక్కువ' : 'Price: Low to High' },
    { value: 'price-high', label: language === 'Telugu' ? 'ధర: ఎక్కువ నుండి తక్కువ' : 'Price: High to Low' },
    { value: 'rating', label: language === 'Telugu' ? 'రేటింగ్' : 'Rating' },
    { value: 'newest', label: language === 'Telugu' ? 'కొత్తవి' : 'Newest First' }
  ];

  return (
    <div className="flex items-center space-x-4">
      {/* Sort Dropdown */}
      <div className="flex items-center space-x-2">
        <SortAsc size={20} className="text-gray-500" />
        <select>
          value={sortBy}
          onChange={(e) => setSortBy(e.target.value)}
          className="border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
        >
          {sortOptions.map((option) => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
      </div>

      {/* Filter Toggle (Mobile) */}
      <button
        onClick={() => setShowFilters(!showFilters)}
        className="lg:hidden flex items-center space-x-2 px-4 py-2 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors"
      >
        <Filter size={16} />
        <span className="text-sm font-medium">
          {language === 'Telugu' ? 'ఫిల్టర్లు' : 'Filters'}
        </span>
      </button>

      {/* Quick Filters */}
      <div className="hidden lg:flex items-center space-x-2">
        <button className="px-3 py-1.5 bg-green-100 text-green-800 rounded-full text-sm font-medium hover:bg-green-200 transition-colors">
          15-Min Delivery
        </button>
        <button className="px-3 py-1.5 bg-blue-100 text-blue-800 rounded-full text-sm font-medium hover:bg-blue-200 transition-colors">
          Free Delivery
        </button>
        <button className="px-3 py-1.5 bg-yellow-100 text-yellow-800 rounded-full text-sm font-medium hover:bg-yellow-200 transition-colors">
          Today's Deals
        </button>
      </div>
    </div>
  );
};

export default FilterBar;

/*Footer*/
import React from 'react';
import { Facebook, Twitter, Instagram, Youtube, Phone, Mail, MapPin, Heart } from 'lucide-react';

interface FooterProps {
  language: string;
}

const Footer: React.FC<FooterProps> = ({ language }) => {
  const footerSections = {
    English: {
      about: {
        title: 'About Zoromart',
        links: ['About Us', 'Careers', 'Press Releases', 'Zoromart Science']
      },
      help: {
        title: 'Help & Support',
        links: ['Customer Service', 'Return Policy', 'Delivery Information', 'Track Your Order']
      },
      business: {
        title: 'Business',
        links: ['Sell on Zoromart', 'Advertise Your Products', 'Become a Delivery Partner', 'Zoromart Pay']
      },
      social: {
        title: 'Connect with Us',
        links: ['Facebook', 'Twitter', 'Instagram', 'YouTube']
      }
    },
    Telugu: {
      about: {
        title: 'జోరోమార్ట్ గురించి',
        links: ['మా గురించి', 'ఉద్యోగాలు', 'పత్రికా ప్రకటనలు', 'జోరోమార్ట్ సైన్స్']
      },
      help: {
        title: 'సహాయం & మద్దతు',
        links: ['కస్టమర్ సేవ', 'రిటర్న్ పాలసీ', 'డెలివరీ సమాచారం', 'మీ ఆర్డర్‌ను ట్రాక్ చేయండి']
      },
      business: {
        title: 'వ్యాపారం',
        links: ['జోరోమార్ట్‌లో అమ్మండి', 'మీ ఉత్పత్తులను ప్రచారం చేయండి', 'డెలివరీ పార్టనర్ అవ్వండి', 'జోరోమార్ట్ పే']
      },
      social: {
        title: 'మాతో అనుసంధానం',
        links: ['ఫేస్‌బుక్', 'ట్విట్టర్', 'ఇన్‌స్టాగ్రామ్', 'యూట్యూబ్']
      }
    }
  };

  const currentLang = language as keyof typeof footerSections;
  const sections = footerSections[currentLang];

  return (
    <footer className="bg-gray-900 text-white">
      {/* Newsletter Section */}
      <div className="bg-gradient-to-r from-orange-600 to-orange-700 py-8">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center">
            <h3 className="text-2xl font-bold mb-2">
              {language === 'Telugu' ? 'న్యూస్‌లెటర్‌కు సబ్‌స్క్రైబ్ చేయండి' : 'Subscribe to Our Newsletter'}
            </h3>
            <p className="text-orange-100 mb-6">
              {language === 'Telugu' 
                ? 'ప్రత్యేక ఆఫర్లు మరియు అప్‌డేట్‌లను పొందండి'
                : 'Get exclusive offers and updates delivered to your inbox'
              }
            </p>
            <div className="max-w-md mx-auto flex">
              <input
                type="email"
                placeholder={language === 'Telugu' ? 'మీ ఇమెయిల్ చిరునామా' : 'Enter your email address'}
                className="flex-1 px-4 py-3 rounded-l-lg text-gray-900 focus:outline-none focus:ring-2 focus:ring-yellow-400"
              />
              <button className="bg-yellow-500 hover:bg-yellow-600 px-6 py-3 rounded-r-lg font-semibold text-gray-900 transition-colors">
                {language === 'Telugu' ? 'సబ్‌స్క్రైబ్' : 'Subscribe'}
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Main Footer Content */}
      <div className="py-12">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
            {/* About Section */}
            <div>
              <h4 className="text-lg font-semibold mb-4">{sections.about.title}</h4>
              <ul className="space-y-3">
                {sections.about.links.map((link, index) => (
                  <li key={index}>
                    <a href="#" className="text-gray-300 hover:text-white transition-colors">
                      {link}
                    </a>
                  </li>
                ))}
              </ul>
            </div>

            {/* Help Section */}
            <div>
              <h4 className="text-lg font-semibold mb-4">{sections.help.title}</h4>
              <ul className="space-y-3">
                {sections.help.links.map((link, index) => (
                  <li key={index}>
                    <a href="#" className="text-gray-300 hover:text-white transition-colors">
                      {link}
                    </a>
                  </li>
                ))}
              </ul>
            </div>

            {/* Business Section */}
            <div>
              <h4 className="text-lg font-semibold mb-4">{sections.business.title}</h4>
              <ul className="space-y-3">
                {sections.business.links.map((link, index) => (
                  <li key={index}>
                    <a href="#" className="text-gray-300 hover:text-white transition-colors">
                      {link}
                    </a>
                  </li>
                ))}
              </ul>
            </div>

            {/* Contact & Social */}
            <div>
              <h4 className="text-lg font-semibold mb-4">
                {language === 'Telugu' ? 'సంప్రదించండి' : 'Contact Us'}
              </h4>
              <div className="space-y-3 mb-6">
                <div className="flex items-center space-x-3">
                  <Phone size={16} className="text-orange-400" />
                  <span className="text-gray-300">1800-123-4567</span>
                </div>
                <div className="flex items-center space-x-3">
                  <Mail size={16} className="text-orange-400" />
                  <span className="text-gray-300">support@zoromart.com</span>
                </div>
                <div className="flex items-center space-x-3">
                  <MapPin size={16} className="text-orange-400" />
                  <span className="text-gray-300">
                    {language === 'Telugu' ? 'అమలాపురం, ఆంధ్రప్రదేశ్' : 'Amalapuram, Andhra Pradesh'}
                  </span>
                </div>
              </div>

              {/* Social Media */}
              <div>
                <h5 className="font-medium mb-3">{sections.social.title}</h5>
                <div className="flex space-x-4">
                  <a href="#" className="text-gray-400 hover:text-blue-500 transition-colors">
                    <Facebook size={20} />
                  </a>
                  <a href="#" className="text-gray-400 hover:text-blue-400 transition-colors">
                    <Twitter size={20} />
                  </a>
                  <a href="#" className="text-gray-400 hover:text-pink-500 transition-colors">
                    <Instagram size={20} />
                  </a>
                  <a href="#" className="text-gray-400 hover:text-red-500 transition-colors">
                    <Youtube size={20} />
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Payment Methods */}
      <div className="border-t border-gray-800 py-6">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center">
            <h5 className="text-sm font-medium mb-4 text-gray-300">
              {language === 'Telugu' ? 'చెల్లింపు పద్ధతులు' : 'Payment Methods'}
            </h5>
            <div className="flex flex-wrap justify-center items-center space-x-6 text-sm text-gray-400">
              <span className="bg-gray-800 px-3 py-1 rounded">UPI</span>
              <span className="bg-gray-800 px-3 py-1 rounded">Paytm</span>
              <span className="bg-gray-800 px-3 py-1 rounded">PhonePe</span>
              <span className="bg-gray-800 px-3 py-1 rounded">Credit/Debit Cards</span>
              <span className="bg-gray-800 px-3 py-1 rounded">Cash on Delivery</span>
              <span className="bg-gray-800 px-3 py-1 rounded">Zoromart Wallet</span>
            </div>
          </div>
        </div>
      </div>

      {/* Bottom Bar */}
      <div className="border-t border-gray-800 py-6">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0">
            <div className="flex items-center space-x-2">
              <span className="text-gray-400">© 2025 Zoromart. All rights reserved.</span>
            </div>
            
            <div className="flex items-center space-x-1 text-gray-400">
              <span>Made with</span>
              <Heart size={16} className="text-red-500 fill-current mx-1" />
              <span>for India</span>
            </div>
            
            <div className="flex space-x-6 text-sm">
              <a href="#" className="text-gray-400 hover:text-white transition-colors">
                {language === 'Telugu' ? 'గోప్యతా విధానం' : 'Privacy Policy'}
              </a>
              <a href="#" className="text-gray-400 hover:text-white transition-colors">
                {language === 'Telugu' ? 'నిబంధనలు' : 'Terms of Service'}
              </a>
              <a href="#" className="text-gray-400 hover:text-white transition-colors">
                {language === 'Telugu' ? 'కుకీలు' : 'Cookies'}
              </a>
            </div>
          </div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;

/*Header*/
import React, { useState } from 'react';
import { Search, ShoppingCart, User, MapPin, Globe, Menu, X } from 'lucide-react';
import { useCart } from '../contexts/CartContext';
import Cart from './Cart';

interface HeaderProps {
  searchQuery: string;
  setSearchQuery: (query: string) => void;
  selectedLocation: string;
  setSelectedLocation: (location: string) => void;
  language: string;
  setLanguage: (language: string) => void;
}

const Header: React.FC<HeaderProps> = ({
  searchQuery,
  setSearchQuery,
  selectedLocation,
  setSelectedLocation,
  language,
  setLanguage
}) => {
  const [showLocationDropdown, setShowLocationDropdown] = useState(false);
  const [showLanguageDropdown, setShowLanguageDropdown] = useState(false);
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const [cartOpen, setCartOpen] = useState(false);
  
  const { state } = useCart();

  const locations = ['Amalapuram', 'Malikipuram', 'Lakkavaram'];
  const languages = ['English', 'Telugu'];

  return (
    <>
      <header className="bg-white shadow-md sticky top-0 z-40">
        {/* Top bar with delivery message */}
        <div className="bg-orange-500 text-white text-center py-2 text-sm">
          <span className="font-medium">
            {language === 'Telugu' ? '15 నిమిషాల్లో డెలివరీ' : 'Now Delivering in 15 Minutes!'} 🚀 
            Free delivery on orders above ₹199
          </span>
        </div>

        {/* Main header */}
        <div className="bg-gradient-to-r from-orange-600 to-orange-700 text-white">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex items-center justify-between h-16">
              {/* Mobile menu button */}
              <button
                className="lg:hidden p-2"
                onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
              >
                {mobileMenuOpen ? <X size={24} /> : <Menu size={24} />}
              </button>

              {/* Logo */}
              <div className="flex items-center">
                <div className="text-2xl font-bold">
                  <span className="text-white">Zoro</span>
                  <span className="text-yellow-300">mart</span>
                </div>
                <div className="hidden sm:block ml-2 text-xs">
                  <div className="text-yellow-300">Ultra-Fast</div>
                  <div className="text-yellow-200">15-Min Delivery</div>
                </div>
              </div>

              {/* Location Selector */}
              <div className="hidden lg:flex items-center relative">
                <MapPin size={16} className="mr-1" />
                <button
                  className="text-sm hover:text-yellow-300 transition-colors"
                  onClick={() => setShowLocationDropdown(!showLocationDropdown)}
                >
                  {language === 'Telugu' ? 'స్థానం' : 'Deliver to'} {selectedLocation}
                </button>
                
                {showLocationDropdown && (
                  <div className="absolute top-full left-0 mt-2 bg-white text-gray-900 rounded-md shadow-lg py-2 w-48 z-50">
                    {locations.map((location) => (
                      <button
                        key={location}
                        className="block w-full text-left px-4 py-2 hover:bg-gray-100 transition-colors"
                        onClick={() => {
                          setSelectedLocation(location);
                          setShowLocationDropdown(false);
                        }}
                      >
                        {location}
                      </button>
                    ))}
                  </div>
                )}
              </div>

              {/* Search Bar */}
              <div className="flex-1 max-w-2xl mx-4 lg:mx-8">
                <div className="relative">
                  <input
                    type="text"
                    placeholder={language === 'Telugu' ? 'ఉత్పత్తులను వెతకండి...' : 'Search for products, brands and more...'}
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="w-full px-4 py-2 pl-12 rounded-md text-gray-900 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-yellow-400"
                  />
                  <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                </div>
              </div>

              {/* Right side actions */}
              <div className="flex items-center space-x-4">
                {/* Language Toggle */}
                <div className="relative">
                  <button
                    className="flex items-center space-x-1 hover:text-yellow-300 transition-colors"
                    onClick={() => setShowLanguageDropdown(!showLanguageDropdown)}
                  >
                    <Globe size={16} />
                    <span className="hidden sm:inline text-sm">{language}</span>
                  </button>
                  
                  {showLanguageDropdown && (
                    <div className="absolute top-full right-0 mt-2 bg-white text-gray-900 rounded-md shadow-lg py-2 w-32 z-50">
                      {languages.map((lang) => (
                        <button
                          key={lang}
                          className="block w-full text-left px-4 py-2 hover:bg-gray-100 transition-colors"
                          onClick={() => {
                            setLanguage(lang);
                            setShowLanguageDropdown(false);
                          }}
                        >
                          {lang}
                        </button>
                      ))}
                    </div>
                  )}
                </div>

                {/* User Account */}
                <button className="flex items-center space-x-1 hover:text-yellow-300 transition-colors">
                  <User size={20} />
                  <span className="hidden sm:inline text-sm">
                    {language === 'Telugu' ? 'ఖాతా' : 'Account'}
                  </span>
                </button>

                {/* Cart */}
                <button 
                  onClick={() => setCartOpen(true)}
                  className="relative flex items-center space-x-1 hover:text-yellow-300 transition-colors"
                >
                  <ShoppingCart size={20} />
                  <span className="hidden sm:inline text-sm">
                    {language === 'Telugu' ? 'కార్ట్' : 'Cart'}
                  </span>
                  {state.itemCount > 0 && (
                    <span className="absolute -top-2 -right-2 bg-yellow-400 text-orange-800 text-xs rounded-full w-5 h-5 flex items-center justify-center font-bold">
                      {state.itemCount}
                    </span>
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Mobile location selector */}
        {mobileMenuOpen && (
          <div className="lg:hidden bg-orange-600 border-t border-orange-500">
            <div className="px-4 py-3">
              <div className="flex items-center space-x-2 mb-2">
                <MapPin size={16} />
                <span className="text-sm">
                  {language === 'Telugu' ? 'డెలివరీ స్థానం' : 'Delivery Location'}
                </span>
              </div>
              <select
                value={selectedLocation}
                onChange={(e) => setSelectedLocation(e.target.value)}
                className="w-full px-3 py-2 rounded-md text-gray-900 bg-white"
              >
                {locations.map((location) => (
                  <option key={location} value={location}>
                    {location}
                  </option>
                ))}
              </select>
            </div>
          </div>
        )}
      </header>

      {/* Cart Component */}
      <Cart 
        isOpen={cartOpen} 
        onClose={() => setCartOpen(false)} 
        language={language}
      />
    </>
  );
};

export default Header;

/*ProductCard*/
import React, { useState } from 'react';
import { Star, Heart, ShoppingCart, Zap, Clock, Truck } from 'lucide-react';
import { Product } from '../types/Product';
import { useCart } from '../contexts/CartContext';

interface ProductCardProps {
  product: Product;
  language: string;
  selectedLocation: string;
}

const ProductCard: React.FC<ProductCardProps> = ({ product, language, selectedLocation }) => {
  const [isWishlisted, setIsWishlisted] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const { addToCart } = useCart();

  const handleAddToCart = async () => {
    setIsLoading(true);
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 500));
    addToCart(product);
    setIsLoading(false);
  };

  const renderStars = (rating: number) => {
    return Array.from({ length: 5 }, (_, i) => (
      <Star
        key={i}
        size={14}
        className={i < Math.floor(rating) ? 'text-yellow-400 fill-current' : 'text-gray-300'}
      />
    ));
  };

  const deliveryTime = Math.floor(Math.random() * 10) + 10; // 10-20 minutes
  const discountPercent = Math.floor(((product.originalPrice - product.price) / product.originalPrice) * 100);

  return (
    <div className="bg-white rounded-xl shadow-sm hover:shadow-xl transition-all duration-300 border border-gray-100 overflow-hidden group">
      {/* Product Image */}
      <div className="relative aspect-square overflow-hidden bg-gray-50">
        <img
          src={product.image}
          alt={product.name}
          className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
        />
        
        {/* Badges */}
        <div className="absolute top-3 left-3 space-y-2">
          {product.fastDelivery && (
            <span className="inline-flex items-center px-2 py-1 bg-green-500 text-white text-xs font-medium rounded-full">
              <Zap size={12} className="mr-1" />
              15-Min
            </span>
          )}
          {discountPercent > 0 && (
            <span className="inline-block px-2 py-1 bg-red-500 text-white text-xs font-medium rounded-full">
              {discountPercent}% OFF
            </span>
          )}
        </div>

        {/* Wishlist Button */}
        <button
          onClick={() => setIsWishlisted(!isWishlisted)}
          className="absolute top-3 right-3 p-2 bg-white rounded-full shadow-md hover:shadow-lg transition-all"
        >
          <Heart
            size={16}
            className={isWishlisted ? 'text-red-500 fill-current' : 'text-gray-400'}
          />
        </button>

        {/* Quick Add Overlay */}
        <div className="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center">
          <button
            onClick={handleAddToCart}
            disabled={isLoading}
            className="bg-orange-600 hover:bg-orange-700 text-white px-6 py-2 rounded-lg font-medium flex items-center space-x-2 transform translate-y-4 group-hover:translate-y-0 transition-transform duration-300"
          >
            {isLoading ? (
              <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent"></div>
            ) : (
              <>
                <ShoppingCart size={16} />
                <span>{language === 'Telugu' ? 'కార్ట్‌కు జోడించు' : 'Add to Cart'}</span>
              </>
            )}
          </button>
        </div>
      </div>

      {/* Product Info */}
      <div className="p-4 space-y-3">
        {/* Brand */}
        <div className="text-sm text-gray-500 font-medium">
          {product.brand}
        </div>

        {/* Product Name */}
        <h3 className="font-semibold text-gray-900 line-clamp-2 leading-5">
          {product.name}
        </h3>

        {/* Rating */}
        <div className="flex items-center space-x-2">
          <div className="flex items-center space-x-1">
            {renderStars(product.rating)}
          </div>
          <span className="text-sm text-gray-600">
            {product.rating} ({product.reviewCount})
          </span>
        </div>

        {/* Price */}
        <div className="flex items-center space-x-2">
          <span className="text-xl font-bold text-gray-900">
            ₹{product.price.toLocaleString('en-IN')}
          </span>
          {product.originalPrice > product.price && (
            <span className="text-sm text-gray-500 line-through">
              ₹{product.originalPrice.toLocaleString('en-IN')}
            </span>
          )}
        </div>

        {/* Delivery Info */}
        <div className="space-y-2">
          {product.fastDelivery ? (
            <div className="flex items-center space-x-2 text-green-600">
              <Zap size={14} />
              <span className="text-sm font-medium">
                {language === 'Telugu' ? `${deliveryTime} నిమిషాల్లో డెలివరీ` : `Delivery in ${deliveryTime} mins`}
              </span>
            </div>
          ) : (
            <div className="flex items-center space-x-2 text-blue-600">
              <Truck size={14} />
              <span className="text-sm">
                {language === 'Telugu' ? 'రేపు డెలివరీ' : 'Next day delivery'}
              </span>
            </div>
          )}

          {product.price >= 199 && (
            <div className="flex items-center space-x-2 text-green-600">
              <span className="text-xs bg-green-100 px-2 py-1 rounded-full">
                {language === 'Telugu' ? 'ఉచిత డెలివరీ' : 'FREE Delivery'}
              </span>
            </div>
          )}
        </div>

        {/* Stock Status */}
        <div className="flex items-center justify-between">
          <div className={`text-sm ${product.inStock ? 'text-green-600' : 'text-red-600'}`}>
            {product.inStock 
              ? (language === 'Telugu' ? 'స్టాక్‌లో ఉంది' : 'In Stock')
              : (language === 'Telugu' ? 'స్టాక్ లేదు' : 'Out of Stock')
            }
          </div>
          
          {product.inStock && product.fastDelivery && (
            <div className="flex items-center space-x-1 text-xs text-orange-600">
              <Clock size={12} />
              <span>Live in {selectedLocation}</span>
            </div>
          )}
        </div>

        {/* Add to Cart Button */}
        <button
          onClick={handleAddToCart}
          disabled={!product.inStock || isLoading}
          className={`w-full py-2.5 px-4 rounded-lg font-medium transition-all duration-200 flex items-center justify-center space-x-2 ${
            product.inStock
              ? 'bg-orange-600 hover:bg-orange-700 text-white hover:shadow-lg transform hover:scale-105'
              : 'bg-gray-200 text-gray-500 cursor-not-allowed'
          }`}
        >
          {isLoading ? (
            <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent"></div>
          ) : (
            <>
              <ShoppingCart size={16} />
              <span>
                {!product.inStock
                  ? (language === 'Telugu' ? 'స్టాక్ లేదు' : 'Out of Stock')
                  : (language === 'Telugu' ? 'కార్ట్‌కు జోడించు' : 'Add to Cart')
                }
              </span>
            </>
          )}
        </button>
      </div>
    </div>
  );
};

export default ProductCard;

/*ProductGrid*/
import React, { useState, useEffect } from 'react';
import ProductCard from './ProductCard';
import FilterBar from './FilterBar';
import { Product } from '../types/Product';
import { generateProducts } from '../data/products';

interface ProductGridProps {
  selectedCategory: string;
  searchQuery: string;
  selectedLocation: string;
  language: string;
}

const ProductGrid: React.FC<ProductGridProps> = ({
  selectedCategory,
  searchQuery,
  selectedLocation,
  language
}) => {
  const [products, setProducts] = useState<Product[]>([]);
  const [filteredProducts, setFilteredProducts] = useState<Product[]>([]);
  const [sortBy, setSortBy] = useState('relevance');
  const [priceRange, setPriceRange] = useState([0, 10000]);
  const [selectedBrands, setSelectedBrands] = useState<string[]>([]);
  const [showFilters, setShowFilters] = useState(false);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Simulate loading
    setLoading(true);
    setTimeout(() => {
      const generatedProducts = generateProducts();
      setProducts(generatedProducts);
      setLoading(false);
    }, 1000);
  }, []);

  useEffect(() => {
    let filtered = products;

    // Category filter
    if (selectedCategory !== 'all') {
      filtered = filtered.filter(product => 
        product.category.toLowerCase().includes(selectedCategory.toLowerCase()) ||
        selectedCategory === 'all'
      );
    }

    // Search filter
    if (searchQuery) {
      filtered = filtered.filter(product =>
        product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        product.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
        product.brand.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    // Price range filter
    filtered = filtered.filter(product =>
      product.price >= priceRange[0] && product.price <= priceRange[1]
    );

    // Brand filter
    if (selectedBrands.length > 0) {
      filtered = filtered.filter(product =>
        selectedBrands.includes(product.brand)
      );
    }

    // Sorting
    switch (sortBy) {
      case 'price-low':
        filtered.sort((a, b) => a.price - b.price);
        break;
      case 'price-high':
        filtered.sort((a, b) => b.price - a.price);
        break;
      case 'rating':
        filtered.sort((a, b) => b.rating - a.rating);
        break;
      case 'newest':
        filtered.sort((a, b) => new Date(b.dateAdded || 0).getTime() - new Date(a.dateAdded || 0).getTime());
        break;
      default:
        // Keep original order for relevance
        break;
    }

    setFilteredProducts(filtered);
  }, [products, selectedCategory, searchQuery, priceRange, selectedBrands, sortBy]);

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-orange-600"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Results Header */}
      <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">
            {searchQuery ? `Search results for "${searchQuery}"` : 'All Products'}
          </h2>
          <p className="text-gray-600 mt-1">
            {filteredProducts.length} products found • Delivering to {selectedLocation}
          </p>
        </div>

        <FilterBar
          sortBy={sortBy}
          setSortBy={setSortBy}
          showFilters={showFilters}
          setShowFilters={setShowFilters}
          language={language}
        />
      </div>

      {/* Mobile Filters */}
      {showFilters && (
        <div className="lg:hidden bg-white border rounded-lg p-4 space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Price Range: ₹{priceRange[0]} - ₹{priceRange[1]}
            </label>
            <input
              type="range"
              min="0"
              max="10000"
              value={priceRange[1]}
              onChange={(e) => setPriceRange([priceRange[0], parseInt(e.target.value)])}
              className="w-full"
            />
          </div>
        </div>
      )}

      {/* Product Grid */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {filteredProducts.map((product) => (
          <ProductCard
            key={product.id}
            product={product}
            language={language}
            selectedLocation={selectedLocation}
          />
        ))}
      </div>

      {/* Empty State */}
      {filteredProducts.length === 0 && (
        <div className="text-center py-12">
          <div className="text-gray-400 mb-4">
            <svg className="mx-auto h-24 w-24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.291.974-5.709 2.291" />
            </svg>
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">No products found</h3>
          <p className="text-gray-500">
            Try adjusting your search criteria or browse different categories.
          </p>
        </div>
      )}
    </div>
  );
};

export default ProductGrid;

/*SideBar*/
import React, { useState } from 'react';
import { ChevronDown, ChevronRight, ShoppingBag, Smartphone, Home, Shirt, Heart, Cpu, Car, BookOpen } from 'lucide-react';

interface SidebarProps {
  selectedCategory: string;
  setSelectedCategory: (category: string) => void;
}

const Sidebar: React.FC<SidebarProps> = ({ selectedCategory, setSelectedCategory }) => {
  const [expandedCategories, setExpandedCategories] = useState<string[]>(['groceries']);

  const categories = [
    {
      id: 'all',
      name: 'All Categories',
      telugu: 'అన్ని వర్గాలు',
      icon: ShoppingBag,
      subcategories: []
    },
    {
      id: 'groceries',
      name: 'Groceries',
      telugu: 'కిరాణా సామాగ్రి',
      icon: ShoppingBag,
      subcategories: ['Fresh Vegetables', 'Fruits', 'Dairy & Eggs', 'Rice & Grains', 'Spices & Masalas', 'Snacks & Beverages']
    },
    {
      id: 'mobiles',
      name: 'Mobiles & Electronics',
      telugu: 'మొబైల్స్ & ఎలక్ట్రానిక్స్',
      icon: Smartphone,
      subcategories: ['Smartphones', 'Tablets', 'Laptops', 'Headphones', 'Chargers & Cables', 'Smart Watches']
    },
    {
      id: 'home-kitchen',
      name: 'Home & Kitchen',
      telugu: 'ఇల్లు & వంటగది',
      icon: Home,
      subcategories: ['Kitchen Appliances', 'Home Decor', 'Furniture', 'Cleaning Supplies', 'Storage & Organization']
    },
    {
      id: 'fashion',
      name: 'Fashion',
      telugu: 'ఫ్యాషన్',
      icon: Shirt,
      subcategories: ['Men\'s Clothing', 'Women\'s Clothing', 'Footwear', 'Accessories', 'Bags & Luggage']
    },
    {
      id: 'personal-care',
      name: 'Personal Care',
      telugu: 'వ్యక్తిగత సంరక్షణ',
      icon: Heart,
      subcategories: ['Health & Wellness', 'Beauty & Cosmetics', 'Hair Care', 'Oral Care', 'Baby Care']
    },
    {
      id: 'electronics',
      name: 'Electronics',
      telugu: 'ఎలక్ట్రానిక్స్',
      icon: Cpu,
      subcategories: ['TV & Audio', 'Cameras', 'Gaming', 'Computer Accessories', 'Smart Home']
    },
    {
      id: 'automotive',
      name: 'Automotive',
      telugu: 'వాహనాలు',
      icon: Car,
      subcategories: ['Car Accessories', 'Bike Accessories', 'Car Care', 'Tools & Equipment']
    },
    {
      id: 'books',
      name: 'Books & Stationery',
      telugu: 'పుస్తకాలు & స్టేషనరీ',
      icon: BookOpen,
      subcategories: ['Books', 'Stationery', 'Art & Craft', 'Educational']
    }
  ];

  const toggleCategory = (categoryId: string) => {
    setExpandedCategories(prev => 
      prev.includes(categoryId) 
        ? prev.filter(id => id !== categoryId)
        : [...prev, categoryId]
    );
  };

  return (
    <aside className="hidden lg:block w-80 bg-white shadow-sm border-r border-gray-200 h-screen overflow-y-auto sticky top-20">
      <div className="p-4">
        <h2 className="text-lg font-semibold text-gray-900 mb-4">Categories</h2>
        
        <div className="space-y-1">
          {categories.map((category) => {
            const IconComponent = category.icon;
            const isExpanded = expandedCategories.includes(category.id);
            const isSelected = selectedCategory === category.id;
            
            return (
              <div key={category.id}>
                <button
                  className={`w-full flex items-center justify-between p-3 rounded-lg transition-all duration-200 ${
                    isSelected 
                      ? 'bg-orange-50 text-orange-700 border-l-4 border-orange-500' 
                      : 'hover:bg-gray-50 text-gray-700'
                  }`}
                  onClick={() => {
                    setSelectedCategory(category.id);
                    if (category.subcategories.length > 0) {
                      toggleCategory(category.id);
                    }
                  }}
                >
                  <div className="flex items-center space-x-3">
                    <IconComponent size={18} className={isSelected ? 'text-orange-600' : 'text-gray-500'} />
                    <span className="font-medium">{category.name}</span>
                  </div>
                  
                  {category.subcategories.length > 0 && (
                    <div className="ml-2">
                      {isExpanded ? (
                        <ChevronDown size={16} className="text-gray-400" />
                      ) : (
                        <ChevronRight size={16} className="text-gray-400" />
                      )}
                    </div>
                  )}
                </button>
                
                {/* Subcategories */}
                {isExpanded && category.subcategories.length > 0 && (
                  <div className="ml-8 mt-2 space-y-1">
                    {category.subcategories.map((subcategory) => (
                      <button
                        key={subcategory}
                        className="block w-full text-left p-2 text-sm text-gray-600 hover:text-orange-600 hover:bg-orange-50 rounded-md transition-colors"
                        onClick={() => setSelectedCategory(`${category.id}-${subcategory.toLowerCase().replace(/\s+/g, '-')}`)}
                      >
                        {subcategory}
                      </button>
                    ))}
                  </div>
                )}
              </div>
            );
          })}
        </div>
        
        {/* Quick Filters */}
        <div className="mt-8 p-4 bg-green-50 rounded-lg">
          <h3 className="font-semibold text-green-800 mb-3">⚡ 15-Min Delivery</h3>
          <div className="space-y-2">
            <label className="flex items-center space-x-2">
              <input type="checkbox" className="text-green-600 focus:ring-green-500" />
              <span className="text-sm text-green-700">Express Delivery Available</span>
            </label>
            <label className="flex items-center space-x-2">
              <input type="checkbox" className="text-green-600 focus:ring-green-500" />
              <span className="text-sm text-green-700">In Stock Now</span>
            </label>
            <label className="flex items-center space-x-2">
              <input type="checkbox" className="text-green-600 focus:ring-green-500" />
              <span className="text-sm text-green-700">Free Delivery</span>
            </label>
          </div>
        </div>
      </div>
    </aside>
  );
};

export default Sidebar;

/*CartContext*/
import React, { createContext, useContext, useReducer, ReactNode } from 'react';
import { Product, CartItem } from '../types/Product';

interface CartState {
  items: CartItem[];
  total: number;
  itemCount: number;
}

type CartAction =
  | { type: 'ADD_TO_CART'; product: Product }
  | { type: 'REMOVE_FROM_CART'; productId: string }
  | { type: 'UPDATE_QUANTITY'; productId: string; quantity: number }
  | { type: 'CLEAR_CART' };

interface CartContextType {
  state: CartState;
  addToCart: (product: Product) => void;
  removeFromCart: (productId: string) => void;
  updateQuantity: (productId: string, quantity: number) => void;
  clearCart: () => void;
}

const CartContext = createContext<CartContextType | undefined>(undefined);

const cartReducer = (state: CartState, action: CartAction): CartState => {
  switch (action.type) {
    case 'ADD_TO_CART': {
      const existingItem = state.items.find(item => item.product.id === action.product.id);
      
      if (existingItem) {
        const updatedItems = state.items.map(item =>
          item.product.id === action.product.id
            ? { ...item, quantity: item.quantity + 1 }
            : item
        );
        
        const total = updatedItems.reduce((sum, item) => sum + (item.product.price * item.quantity), 0);
        const itemCount = updatedItems.reduce((sum, item) => sum + item.quantity, 0);
        
        return { items: updatedItems, total, itemCount };
      } else {
        const newItems = [...state.items, { product: action.product, quantity: 1 }];
        const total = newItems.reduce((sum, item) => sum + (item.product.price * item.quantity), 0);
        const itemCount = newItems.reduce((sum, item) => sum + item.quantity, 0);
        
        return { items: newItems, total, itemCount };
      }
    }
    
    case 'REMOVE_FROM_CART': {
      const newItems = state.items.filter(item => item.product.id !== action.productId);
      const total = newItems.reduce((sum, item) => sum + (item.product.price * item.quantity), 0);
      const itemCount = newItems.reduce((sum, item) => sum + item.quantity, 0);
      
      return { items: newItems, total, itemCount };
    }
    
    case 'UPDATE_QUANTITY': {
      if (action.quantity <= 0) {
        return cartReducer(state, { type: 'REMOVE_FROM_CART', productId: action.productId });
      }
      
      const updatedItems = state.items.map(item =>
        item.product.id === action.productId
          ? { ...item, quantity: action.quantity }
          : item
      );
      
      const total = updatedItems.reduce((sum, item) => sum + (item.product.price * item.quantity), 0);
      const itemCount = updatedItems.reduce((sum, item) => sum + item.quantity, 0);
      
      return { items: updatedItems, total, itemCount };
    }
    
    case 'CLEAR_CART':
      return { items: [], total: 0, itemCount: 0 };
    
    default:
      return state;
  }
};

export const CartProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [state, dispatch] = useReducer(cartReducer, {
    items: [],
    total: 0,
    itemCount: 0
  });

  const addToCart = (product: Product) => {
    dispatch({ type: 'ADD_TO_CART', product });
  };

  const removeFromCart = (productId: string) => {
    dispatch({ type: 'REMOVE_FROM_CART', productId });
  };

  const updateQuantity = (productId: string, quantity: number) => {
    dispatch({ type: 'UPDATE_QUANTITY', productId, quantity });
  };

  const clearCart = () => {
    dispatch({ type: 'CLEAR_CART' });
  };

  return (
    <CartContext.Provider value={{
      state,
      addToCart,
      removeFromCart,
      updateQuantity,
      clearCart
    }}>
      {children}
    </CartContext.Provider>
  );
};

export const useCart = () => {
  const context = useContext(CartContext);
  if (context === undefined) {
    throw new Error('useCart must be used within a CartProvider');
  }
  return context;
};

/*Products*/
import { Product } from '../types/Product';

export const generateProducts = (): Product[] => {
  const categories = ['groceries', 'mobiles', 'home-kitchen', 'fashion', 'personal-care', 'electronics'];
  const brands = ['Samsung', 'Apple', 'Tata', 'Amul', 'Britannia', 'LG', 'Sony', 'Nike', 'Adidas', 'Unilever'];
  
  const sampleProducts = [
    // Groceries
    {
      id: '1',
      name: 'Basmati Rice Premium Quality',
      description: 'Premium quality basmati rice, long grain, aromatic',
      price: 299,
      originalPrice: 350,
      image: 'https://i.postimg.cc/7YvBN4TW/Screenshot-2025-06-21-070520.png',
      category: 'groceries',
      brand: 'Tata',
      rating: 4.5,
      reviewCount: 1250,
      inStock: true,
      fastDelivery: true
    },
    {
      id: '2',
      name: 'Fresh Milk 1L',
      description: 'Fresh cow milk, full cream, pasteurized',
      price: 65,
      originalPrice: 70,
      image: 'https://i.postimg.cc/wj7wkBjL/milk-266997-1280.jpg',
      category: 'groceries',
      brand: 'Amul',
      rating: 4.7,
      reviewCount: 890,
      inStock: true,
      fastDelivery: true
    },
    {
      id: '3',
      name: 'Bread Whole Wheat',
      description: 'Healthy whole wheat bread, soft and fresh',
      price: 45,
      originalPrice: 50,
      image: 'https://images.pexels.com/photos/1775043/pexels-photo-1775043.jpeg?auto=compress&cs=tinysrgb&w=400',
      category: 'groceries',
      brand: 'Britannia',
      rating: 4.3,
      reviewCount: 567,
      inStock: true,
      fastDelivery: true
    },

    // Electronics & Mobiles
    {
      id: '4',
      name: 'Samsung Galaxy S24',
      description: 'Latest Samsung flagship with AI features, 256GB',
      price: 79999,
      originalPrice: 89999,
      image: 'https://images.pexels.com/photos/607812/pexels-photo-607812.jpeg?auto=compress&cs=tinysrgb&w=400',
      category: 'mobiles',
      brand: 'Samsung',
      rating: 4.6,
      reviewCount: 2341,
      inStock: true,
      fastDelivery: false
    },
    {
      id: '5',
      name: 'iPhone 15 Pro',
      description: 'Apple iPhone 15 Pro with titanium design, 128GB',
      price: 134900,
      originalPrice: 139900,
      image: 'https://images.pexels.com/photos/788946/pexels-photo-788946.jpeg?auto=compress&cs=tinysrgb&w=400',
      category: 'mobiles',
      brand: 'Apple',
      rating: 4.8,
      reviewCount: 1876,
      inStock: true,
      fastDelivery: false
    },
    {
      id: '6',
      name: 'Sony 55" 4K Smart TV',
      description: 'Sony Bravia 55 inch 4K HDR Smart Android TV',
      price: 54999,
      originalPrice: 64999,
      image: 'https://images.pexels.com/photos/1201996/pexels-photo-1201996.jpeg?auto=compress&cs=tinysrgb&w=400',
      category: 'electronics',
      brand: 'Sony',
      rating: 4.4,
      reviewCount: 892,
      inStock: true,
      fastDelivery: false
    },

    // Home & Kitchen
    {
      id: '7',
      name: 'Paper Clips',
      description: 'Premium coating, set of 3 ',
      price: 25,
      originalPrice: 50,
      image: 'https://images.pexels.com/photos/4226796/pexels-photo-4226796.jpeg?auto=compress&cs=tinysrgb&w=400',
      category: 'home-kitchen',
      brand: 'Prestige',
      rating: 4.2,
      reviewCount: 678,
      inStock: true,
      fastDelivery: true
    },
    {
      id: '8',
      name: 'Microwave Oven 25L',
      description: 'Convection microwave with grill function',
      price: 12999,
      originalPrice: 15999,
      image: 'https://images.pexels.com/photos/4686709/pexels-photo-4686709.jpeg?auto=compress&cs=tinysrgb&w=400',
      category: 'home-kitchen',
      brand: 'LG',
      rating: 4.5,
      reviewCount: 1123,
      inStock: true,
      fastDelivery: false
    },

    // Fashion
    {
      id: '9',
      name: 'Running Shoes Men',
      description: 'Comfortable running shoes with air cushioning',
      price: 2999,
      originalPrice: 3999,
      image: 'https://images.pexels.com/photos/1456706/pexels-photo-1456706.jpeg?auto=compress&cs=tinysrgb&w=400',
      category: 'fashion',
      brand: 'Nike',
      rating: 4.6,
      reviewCount: 934,
      inStock: true,
      fastDelivery: true
    },
    {
      id: '10',
      name: 'Cotton T-Shirt',
      description: '100% cotton comfortable t-shirt, multiple colors',
      price: 599,
      originalPrice: 799,
      image: 'https://images.pexels.com/photos/769733/pexels-photo-769733.jpeg?auto=compress&cs=tinysrgb&w=400',
      category: 'fashion',
      brand: 'Adidas',
      rating: 4.3,
      reviewCount: 456,
      inStock: true,
      fastDelivery: true
    },

    // Personal Care
    {
      id: '11',
      name: 'Shampoo Anti-Dandruff',
      description: 'Clinically proven anti-dandruff shampoo 400ml',
      price: 349,
      originalPrice: 399,
      image: 'https://images.pexels.com/photos/4465831/pexels-photo-4465831.jpeg?auto=compress&cs=tinysrgb&w=400',
      category: 'personal-care',
      brand: 'Unilever',
      rating: 4.4,
      reviewCount: 789,
      inStock: true,
      fastDelivery: true
    },
    {
      id: '12',
      name: 'Face Cream SPF 30',
      description: 'Daily moisturizing face cream with sun protection',
      price: 299,
      originalPrice: 399,
      image: 'https://images.pexels.com/photos/3018845/pexels-photo-3018845.jpeg?auto=compress&cs=tinysrgb&w=400',
      category: 'personal-care',
      brand: 'Nivea',
      rating: 4.1,
      reviewCount: 623,
      inStock: true,
      fastDelivery: true
    },

    // Additional products
    {
      id: '13',
      name: 'Wireless headphones',
      description: 'True wireless earbuds with noise cancellation',
      price: 4999,
      originalPrice: 6999,
      image: 'https://images.pexels.com/photos/3394650/pexels-photo-3394650.jpeg?auto=compress&cs=tinysrgb&w=400',
      category: 'electronics',
      brand: 'Sony',
      rating: 4.5,
      reviewCount: 1456,
      inStock: true,
      fastDelivery: true
    },
    {
      id: '14',
      name: 'Dry Fruits',
      description: 'Pure, natural and unprocessed',
      price: 299,
      originalPrice: 349,
      image: 'https://images.pexels.com/photos/1295572/pexels-photo-1295572.jpeg?auto=compress&cs=tinysrgb&w=400',
      category: 'groceries',
      brand: 'Patanjali',
      rating: 4.6,
      reviewCount: 234,
      inStock: true,
      fastDelivery: true
    },
    {
      id: '15',
      name: 'Coffee Table Modern',
      description: 'Modern glass coffee table for living room',
      price: 8999,
      originalPrice: 12999,
      image: 'https://images.pexels.com/photos/1571463/pexels-photo-1571463.jpeg?auto=compress&cs=tinysrgb&w=400',
      category: 'home-kitchen',
      brand: 'IKEA',
      rating: 4.3,
      reviewCount: 187,
      inStock: true,
      fastDelivery: false
    }
  ];

  return sampleProducts;
};

/*App*/
import React, { useState } from 'react';
import Header from './components/Header';
import Sidebar from './components/Sidebar';
import ProductGrid from './components/ProductGrid';
import Banner from './components/Banner';
import Footer from './components/Footer';
import { CartProvider } from './contexts/CartContext';

function App() {
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedLocation, setSelectedLocation] = useState('Amalapuram');
  const [language, setLanguage] = useState('English');

  return (
    <CartProvider>
      <div className="min-h-screen bg-gray-50">
        <Header 
          searchQuery={searchQuery}
          setSearchQuery={setSearchQuery}
          selectedLocation={selectedLocation}
          setSelectedLocation={setSelectedLocation}
          language={language}
          setLanguage={setLanguage}
        />
        
        <Banner />
        
        <div className="flex">
          <Sidebar 
            selectedCategory={selectedCategory}
            setSelectedCategory={setSelectedCategory}
          />
          
          <main className="flex-1 p-4 lg:p-6">
            <ProductGrid 
              selectedCategory={selectedCategory}
              searchQuery={searchQuery}
              selectedLocation={selectedLocation}
              language={language}
            />
          </main>
        </div>
        
        <Footer language={language} />
      </div>
    </CartProvider>
  );
}

export default App;



